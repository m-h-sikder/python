def precedence(op):
    if op in {'+', '-'}:
        return 1
    elif op in {'*', '/'}:
        return 2
    return 0  # If the operator is not recognized, return 0 precedence

def apply_operation(op, num1, num2):
    if op == '+':
        return num1 + num2
    elif op == '-':
        return num1 - num2
    elif op == '*':
        return num1 * num2
    elif op == '/':
        if num2 == 0:
            raise ZeroDivisionError("Cannot divide by zero")
        return num1 / num2

def evaluate_expression(expression):
    operators = set(['+', '-', '*', '/'])
    numbers = []
    ops = []

    i = 0
    while i < len(expression):
        if expression[i].isdigit() or expression[i] == '.':
            num = ''
            while i < len(expression) and (expression[i].isdigit() or expression[i] == '.'):
                num += expression[i]
                i += 1
            numbers.append(float(num))
        elif expression[i] in operators:
            while ops and precedence(ops[-1]) >= precedence(expression[i]):
                num2 = numbers.pop()
                num1 = numbers.pop()
                op = ops.pop()
                numbers.append(apply_operation(op, num1, num2))
            ops.append(expression[i])
            i += 1
        else:
            i += 1

    while ops:
        num2 = numbers.pop()
        num1 = numbers.pop()
        op = ops.pop()
        numbers.append(apply_operation(op, num1, num2))

    return numbers[0]

# Main loop to accept and evaluate expressions
while True:
    # Prompt user for input
    user_input = input("Enter an expression (or 'exit' to end): ")

    # If user wants to exit, break the loop
    if user_input == "exit":
        break

    # Evaluate the expression and print the result
    try:
        result = evaluate_expression(user_input)
        print("Result:", result)
    except Exception as e:
        print("Error:", e)
